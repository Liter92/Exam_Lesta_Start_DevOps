pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "liter92/task_examen_web"
        DOCKER_REGISTRY = "docker.io"
    }
    stages {
        stage('Clone Repository') {
            steps {
                withCredentials([string(credentialsId: '098GIT', variable: 'GIT_TOKEN')]) {
                    sh '''
                        find . -mindepth 1 -delete
                        git clone https://Liter92:$GIT_TOKEN@github.com/Liter92/Exam_Lesta_Start_DevOps.git .
                    '''
                }
            }
        }
        stage('Test/Lint') {
            steps {
                sh '''
                    sudo apt install flake8
                    flake8 --max-line-length=120 . || true
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t $DOCKER_IMAGE .
                '''
            }
        }
        stage('Docker-Compose up') {
            steps {
                sh '''
                    docker-compose up -d
                '''
            }
        }
        stage('Push to Docker Registry') {
            steps {
                withCredentials([string(credentialsId: '111', variable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u liter92 --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }
        stage('Cleanup After Tests') {
            steps {
                sh '''
                    echo "Удаляем файлы репозитория..."
                    rm -rf ./*
                    echo "Удаляем старый контейнер..."
                    docker stop flask_app || true
                    docker rm flask_app || true
                    docker stop postgres_db || true
                    docker rm postgres_db || true
                    echo "Удаляем старый образ..."
                    docker rmi $DOCKER_IMAGE || true
                    docker rmi postgres:15 || true
                '''
            }
        }
    }
    
    post {
        success {
            echo "Успешное выполнение, переходим к CI"
            build job: 'CD'
        }
    }
}
